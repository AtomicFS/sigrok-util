diff --git a/CMakeLists.txt b/CMakeLists.txt
index 11767a6..b8eed96 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -317,12 +317,21 @@ if(WIN32)
 	list(APPEND PULSEVIEW_LINK_LIBS "-lqsvg")
 endif()
 
+if(ANDROID)
+add_library(${PROJECT_NAME} SHARED
+	${pulseview_SOURCES}
+	${pulseview_HEADERS_MOC}
+	${pulseview_FORMS_HEADERS}
+	${pulseview_RESOURCES_RCC}
+)
+else()
 add_executable(${PROJECT_NAME}
 	${pulseview_SOURCES}
 	${pulseview_HEADERS_MOC}
 	${pulseview_FORMS_HEADERS}
 	${pulseview_RESOURCES_RCC}
 )
+endif()
 
 target_link_libraries(${PROJECT_NAME} ${PULSEVIEW_LINK_LIBS})
 
diff --git a/main.cpp b/main.cpp
index 2c6a59e..79627db 100644
--- a/main.cpp 2014-04-26 23:40:24.253187700 +0200
+++ b/main.cpp	2014-04-27 00:38:55.378353311 +0200
@@ -20,6 +20,9 @@
 
 #ifdef ENABLE_DECODE
 #include <libsigrokdecode/libsigrokdecode.h> /* First, so we avoid a _POSIX_C_SOURCE warning. */
+#ifdef ANDROID
+#include <jni.h>
+#endif
 #endif
 
 #include <stdint.h>
@@ -45,6 +48,47 @@
 Q_IMPORT_PLUGIN(qsvg)
 #endif
 
+#if defined(ENABLE_DECODE) && defined(ANDROID)
+jint JNI_OnLoad(JavaVM *vm, void *reserved)
+{
+	JNIEnv* env;
+
+	(void)reserved;
+
+	if (vm->GetEnv((void **)&env, JNI_VERSION_1_6) != JNI_OK) {
+		return -1;
+	}
+
+	jclass envc = env->FindClass("org/sigrok/androidutils/Environment");
+	jmethodID getEnv =  env->GetStaticMethodID(envc, "getEnvironment",
+						   "()[Ljava/lang/String;");
+	jobjectArray envs =
+		(jobjectArray)env->CallStaticObjectMethod(envc, getEnv);
+	jsize i, envn = env->GetArrayLength(envs);
+	for (i=0; i<envn; i+=2) {
+		jstring key = (jstring)env->GetObjectArrayElement(envs, i);
+		jstring value = (jstring)env->GetObjectArrayElement(envs, i+1);
+		const char *utfkey = env->GetStringUTFChars(key, 0);
+		const char *utfvalue = env->GetStringUTFChars(value, 0);
+		setenv(utfkey, utfvalue, 1);
+		env->ReleaseStringUTFChars(value, utfvalue);
+		env->ReleaseStringUTFChars(key, utfkey);
+		env->DeleteLocalRef(value);
+		env->DeleteLocalRef(key);
+	}
+	env->DeleteLocalRef(envs);
+	env->DeleteLocalRef(envc);
+
+	return JNI_VERSION_1_6;
+}
+
+void JNI_OnUnload(JavaVM *vm, void *reserved)
+{
+	(void)vm;
+	(void)reserved;
+}
+#endif
+
 void usage()
 {
 	fprintf(stdout,
