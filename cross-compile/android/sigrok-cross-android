#!/bin/bash
##
## This file is part of the sigrok-util project.
##
## Copyright (C) 2013 Uwe Hermann <uwe@hermann-uwe.de>
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
##

set -e

# The path where the Android NDK is located.
ANDROID_NDK=$HOME/android/android-ndk-r9d

# The path where the Android SDK is located.
ANDROID_SDK=$HOME/android/android-sdk-linux

# The path where your Android toolchain directory is located.
TOOLCHAIN=$HOME/android/android-arm-toolchain
# TOOLCHAIN=$HOME/android/android-mipsel-toolchain
# TOOLCHAIN=$HOME/android/android-i686-toolchain

# Select which Android toolchain to use.
# Don't forget to also adapt TOOLCHAIN above if you change TOOLCHAIN_TRIPLET!
TOOLCHAIN_TRIPLET=arm-linux-androideabi
# TOOLCHAIN_TRIPLET=mipsel-linux-android
# TOOLCHAIN_TRIPLET=i686-linux-android

# The path where the cross-compiled packages will be installed.
PREFIX=$HOME/sr_android

# The path where to download files to and where to build packages.
BUILDDIR=./build

# Edit this to enable/disable/modify parallel compiles.
PARALLEL="-j 2"

# You usually don't need to change anything below this line.

# -----------------------------------------------------------------------------

VER_LIBICONV=1.14
VER_GETTEXT=0.19.2
VER_ZLIB=1.2.8
VER_PCRE=8.35
VER_LIBFFI=3.1
VER_GLIB=2.41.3
VER_GLIB_SHORT=2.41
VER_LIBSIGCXX=2.3.2
VER_LIBSIGCXX_SHORT=2.3
VER_LIBZIP=0.11.2
VER_LIBFTDI1=1.1
VER_LIBUSB=1.0.19
VER_PYTHON=3.3.3
VER_BOOST=1.55.0
VER_QT=5.3.1

SF_MIRROR=switch.dl.sourceforge.net

WGET="wget --quiet"
GIT_CLONE="git clone --depth=1"

case "$TOOLCHAIN_TRIPLET" in
  arm*) TARGET_ARCH=armeabi;;
  mips*) TARGET_ARCH=mips;;
  i686*) TARGET_ARCH=x86;;
  *) echo >&2 "Unknown prefix for TOOLCHAIN_TRIPLET."; exit 1;;
esac

# -----------------------------------------------------------------------------

# Remove build directory contents (if any) and create a new build dir.
rm -rf $BUILDDIR
mkdir $BUILDDIR
cd $BUILDDIR

# -----------------------------------------------------------------------------

# Build host Python before we start messing with the environment.
# Don't do parallel builds, this doesn't seem to work well.
$WGET http://python.org/ftp/python/$VER_PYTHON/Python-$VER_PYTHON.tar.xz
tar xJf Python-$VER_PYTHON.tar.xz
cd Python-$VER_PYTHON
./configure
make python
mv python hostpython
cd ..

# -----------------------------------------------------------------------------

# We need to find tools in the toolchain.
export PATH=$TOOLCHAIN/bin:$PATH

# Tell pkg-config to only look for our cross-built stuff.
export PKG_CONFIG_LIBDIR="$PREFIX/lib/pkgconfig"
export -n PKG_CONFIG_PATH

# Define some helper variables.
C="--host=$TOOLCHAIN_TRIPLET --prefix=$PREFIX"
CM="-Wno-dev -DCMAKE_TOOLCHAIN_FILE=../android.toolchain.cmake -DANDROID_ABI=${TARGET_ARCH} -DCMAKE_INSTALL_PREFIX=${PREFIX} -DANDROID_STANDALONE_TOOLCHAIN=${TOOLCHAIN}"

# Look for STL, needed to build bindings
NDK_TOOLCHAIN_VERSION=`${TOOLCHAIN_TRIPLET}-gcc --version | head -1 | sed -e 's/.* \([0-9]\+\.[0-9.]\+\)\( \|.*\)$/\1/'`
STL_BASE="${ANDROID_NDK}/sources/cxx-stl/gnu-libstdc++/${NDK_TOOLCHAIN_VERSION}"
if [ -d ${STL_BASE}/include ]; then
  CPPFLAGS_STL="-I${STL_BASE}/include -I${STL_BASE}/libs/${TARGET_ARCH}/include"
  LDFLAGS_STL="-L${STL_BASE}/libs/${TARGET_ARCH} -Wl,-rpath=${STL_BASE}/libs/${TARGET_ARCH}"
  BINDINGS_CONFIG="--enable-bindings"
else
  echo "Warning: STL unavailable, libsigrok bindings will not be built."
  CPPFLAGS_STL=
  LDFLAGS_STL=
  BINDINGS_CONFIG="--disable-bindings"
fi

# -----------------------------------------------------------------------------

# Get the latest versions of config.guess/config.sub that know about Android.
$GIT_CLONE git://git.savannah.gnu.org/config.git

# Get a toolchain for cmake that knows about Android.
$WGET https://android-cmake.googlecode.com/hg/toolchain/android.toolchain.cmake
patch < ../android.toolchain.cmake.patch android.toolchain.cmake

# -----------------------------------------------------------------------------

# Python (needed for libsigrokdecode)
# Don't do parallel Python builds, this doesn't seem to work well.
cd Python-$VER_PYTHON
make distclean
autoreconf
patch -p1 < ../../Python-$VER_PYTHON.patch
ac_cv_file__dev_ptmx=no ac_cv_file__dev_ptc=no ac_cv_func_pipe2=no ac_cv_func_fdatasync=no ac_cv_func_killpg=no ac_cv_func_waitid=no ac_cv_func_sigaltstack=no ./configure $C --build=x86_64-linux-gnu --disable-ipv6
sed -i "s/^#zlib/zlib/g" Modules/Setup
make PYTHON_FOR_BUILD=./hostpython install
cd ..

# libiconv (needed for glib)
$WGET http://ftp.gnu.org/pub/gnu/libiconv/libiconv-$VER_LIBICONV.tar.gz
tar xfz libiconv-$VER_LIBICONV.tar.gz
cd libiconv-$VER_LIBICONV
cp -f ../config/config.guess build-aux
cp -f ../config/config.sub build-aux
cp -f ../config/config.guess libcharset/build-aux
cp -f ../config/config.sub libcharset/build-aux
./configure $C --enable-shared
make lib/localcharset.h
cd libcharset
make $PARALLEL
make install
cd ../lib
make $PARALLEL
make install
cd ..
test -d $PREFIX/include || mkdir $PREFIX/include
cp include/iconv.h.inst $PREFIX/include/iconv.h
cd ..

# gettext (needed for glib)
$WGET http://ftp.gnu.org/pub/gnu/gettext/gettext-$VER_GETTEXT.tar.gz
tar xfz gettext-$VER_GETTEXT.tar.gz
cd gettext-$VER_GETTEXT
./configure $C --enable-shared --disable-libasprintf
cd gettext-runtime
make $PARALLEL
make install
cd ../..

# zlib (needed for glib and libzip)
$WGET http://zlib.net/zlib-$VER_ZLIB.tar.gz
tar xfvz zlib-$VER_ZLIB.tar.gz
cd zlib-$VER_ZLIB
# Note: zlib's configure doesn't understand --host, we need to pass $CC.
CC=$TOOLCHAIN_TRIPLET-gcc ./configure --prefix=$PREFIX
make $PARALLEL
make install
cd ..

# pcre (needed for glib)
$WGET ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-$VER_PCRE.tar.gz
tar xfvz pcre-$VER_PCRE.tar.gz
cd pcre-$VER_PCRE
./configure $C --disable-cpp
make $PARALLEL
make install
cd ..

# libffi (needed for glib)
$WGET ftp://sourceware.org/pub/libffi/libffi-$VER_LIBFFI.tar.gz
tar xfz libffi-$VER_LIBFFI.tar.gz
cd libffi-$VER_LIBFFI
./configure $C
make $PARALLEL
make install
cd ..

# glib (needed for libsigrok)
$WGET http://ftp.gnome.org/pub/gnome/sources/glib/$VER_GLIB_SHORT/glib-$VER_GLIB.tar.xz
tar xJf glib-$VER_GLIB.tar.xz
cd glib-$VER_GLIB
./autogen.sh
# Note: Manual LDFLAGS/CPPFLAGS needed for libiconv, rest uses pkg-config.
LDFLAGS=-L$PREFIX/lib CPPFLAGS=-I$PREFIX/include glib_cv_stack_grows=no glib_cv_uscore=no ac_cv_func_posix_getpwuid_r=no ac_cv_func_posix_getgrgid_r=no ./configure --disable-compile-warnings $C
make $PARALLEL
make install
cd ..

# libzip (needed for libsigrok)
$WGET http://www.nih.at/libzip/libzip-$VER_LIBZIP.tar.gz
tar xfz libzip-$VER_LIBZIP.tar.gz
cd libzip-$VER_LIBZIP
cp -f ../config/config.guess .
cp -f ../config/config.sub .
./configure $C
make $PARALLEL
make install
cd ..

# libusb-1.0 (needed for libsigrok)
$WGET http://$SF_MIRROR/project/libusb/libusb-1.0/libusb-$VER_LIBUSB/libusb-$VER_LIBUSB.tar.bz2
tar xfj libusb-$VER_LIBUSB.tar.bz2
cd libusb-$VER_LIBUSB
patch -p1 < ../../libusb-1.0.patch
./configure $C --disable-udev
make $PARALLEL
make install
cd ..

# libftdi1 (needed for libsigrok)
$WGET http://www.intra2net.com/en/developer/libftdi/download/libftdi1-$VER_LIBFTDI1.tar.bz2
tar xfj libftdi1-$VER_LIBFTDI1.tar.bz2
cd libftdi1-$VER_LIBFTDI1
cmake $CM -DFTDIPP=OFF .
make $PARALLEL
make install
cd ..

# libserialport
$GIT_CLONE git://sigrok.org/libserialport
cd libserialport
./autogen.sh
./configure $C
make $PARALLEL V=1
make install
cd ..

# Build dependencies for libsigrok bindings if needed

if [ x"$CPPFLAGS_STL" != x ]; then

  # libsigc++ (needed for glibmm)
  $WGET http://ftp.gnome.org/pub/gnome/sources/libsigc++/$VER_LIBSIGCXX_SHORT/libsigc++-$VER_LIBSIGCXX.tar.xz
  tar xJf libsigc++-$VER_LIBSIGCXX.tar.xz
  cd libsigc++-$VER_LIBSIGCXX
  cp -f ../config/config.guess build
  cp -f ../config/config.sub build
  CPPFLAGS="$CPPFLAGS_STL" LDFLAGS="$LDFLAGS_STL -lgnustl_shared" ./configure $C
  make $PARALLEL
  make install
  cd ..

  # glibmm (needed for libsigrok bindings)
  $WGET http://ftp.gnome.org/pub/gnome/sources/glibmm/$VER_GLIB_SHORT/glibmm-$VER_GLIB.tar.xz
  tar xJf glibmm-$VER_GLIB.tar.xz
  cd glibmm-$VER_GLIB
  CPPFLAGS="$CPPFLAGS_STL" LDFLAGS="$LDFLAGS_STL -lgnustl_shared" ./configure $C
  make $PARALLEL
  make install
  cd ..

fi

# libsigrok
$GIT_CLONE git://sigrok.org/libsigrok
cd libsigrok
./autogen.sh
CPPFLAGS="$CPPFLAGS_STL" LDFLAGS="$LDFLAGS_STL" ./configure $C $BINDINGS_CONFIG --datadir=/sdcard
make $PARALLEL V=1
make datadir='$(datarootdir)' install
cd ..

# libsigrokdecode
$GIT_CLONE git://sigrok.org/libsigrokdecode
cd libsigrokdecode
./autogen.sh
./configure $C
make $PARALLEL V=1
make install
cd ..

# sigrok-cli
$GIT_CLONE git://sigrok.org/sigrok-cli
cd sigrok-cli
./autogen.sh
./configure $C
make $PARALLEL V=1
make install
cd ..

# Check if we have all requirements to build PulseView:

if [ -z "$ANDROID_NDK" -o ! -d "$ANDROID_NDK" ]; then
  echo "Android NDK not available, not building PulseView."
  exit 0
fi

if [ -z "$ANDROID_SDK" -o \
     ! -d "$ANDROID_SDK"/platforms/android-8 -o \
     ! -d "$ANDROID_SDK"/platforms/android-10 -o \
     ! -d "$ANDROID_SDK"/platforms/android-11 -o \
     ! -d "$ANDROID_SDK"/platforms/android-14 -o \
     ! -d "$ANDROID_SDK"/platforms/android-16 ]; then
  echo "Android SDK with platforms 8 10 11 14 16 not available, not building PulseView."
  exit 0
fi

if [ ! -e "${ANDROID_SDK}/tools/android" ]; then
  echo "Essential Android build tools not available, not building PulseView."
  exit 0
fi

NDK_HOST=`"$ANDROID_NDK/ndk-build" -p 2>/dev/null | awk '$1 == "HOST_TAG" { print $3 }'`

# Boost (needed for PulseView)
$WGET http://$SF_MIRROR/project/boost/boost/$VER_BOOST/boost_${VER_BOOST//./_}.tar.bz2
tar xfj boost_${VER_BOOST//./_}.tar.bz2
cd boost_${VER_BOOST//./_}
patch -p1 < ../../boost.patch
./bootstrap.sh --with-toolset=gcc --with-libraries=filesystem,system --without-icu
echo "using gcc : $NDK_TOOLCHAIN_VERSION : \"${TOOLCHAIN_TRIPLET}-g++\" : <cxxflags>\"-I$PREFIX/include $CPPFLAGS_STL\" <linkflags>\"-L$PREFIX/lib $LDFLAGS_STL -lgnustl_shared\" ;" > user-config.jam
./b2 -q -d+2 --user-config=user-config.jam toolset=gcc variant=release link=shared threading=multi runtime-link=shared target-os=android --prefix=$PREFIX --layout=system install $PARALLEL
cd ..

# Qt (needed for PulseView)
$WGET http://download.qt-project.org/official_releases/qt/${VER_QT%.*}/${VER_QT}/single/qt-everywhere-opensource-src-${VER_QT}.tar.gz
tar xfz qt-everywhere-opensource-src-${VER_QT}.tar.gz
cd qt-everywhere-opensource-src-${VER_QT}
patch -p1 < ../../android-qt.patch
./configure --prefix="$PREFIX" -developer-build -xplatform android-g++ -nomake tests -nomake examples -android-sdk "$ANDROID_SDK" -android-ndk "$ANDROID_NDK" -android-ndk-host "$NDK_HOST" -android-arch "$TARGET_ARCH" -android-toolchain-version "$NDK_TOOLCHAIN_VERSION" -skip qttranslations -skip qtwebkit -skip qtserialport -skip qtwebkit-examples -skip qtlocation -skip qtconnectivity -opensource -confirm-license
make module-qtbase module-qtandroidextras module-qtsvg module-qtimageformats $PARALLEL
make install
cd ..

# sigrok-androidutils
$GIT_CLONE git://sigrok.org/sigrok-androidutils
cd sigrok-androidutils
./autogen.sh
./configure $C --with-android-sdk="${ANDROID_SDK}"
make $PARALLEL V=1
make install
cd ..

# PulseView
$GIT_CLONE git://sigrok.org/pulseview
cd pulseview
cmake $CM -DANDROID_STL_PATH=${ANDROID_NDK}/sources/cxx-stl .
make $PARALLEL VERBOSE=1
cd android
"${ANDROID_SDK}/tools/android" update project -p . -t android-14 -n PulseView
ant debug
cd ../..

